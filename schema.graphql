# Note: `project.id` is string concatenated from multiple properties. `projectId` represents an integer id of the project.

type ProtocolLog @entity {
  id: ID!
  v2: ProtocolV2Log @derivedFrom(field: "log")

  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

type _Schema_
  @fulltext(
    name: "projectSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Project", fields: [{ name: "handle" }] }]
  )

#############################################################################
############################### vx.x entities ###############################
#############################################################################

# v2
type ProjectCreateEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  caller: Bytes!
}

# v2
type Project @entity {
  id: ID!
  projectId: Int!

  # Conditional on if using v1.x or v2 contracts
  metadataUri: String
  metadataDomain: BigInt

  owner: Bytes!
  createdAt: BigInt!
  totalPaid: BigInt!
  totalRedeemed: BigInt!
  currentBalance: BigInt!

  # Derived fields
  participants: [Participant!]! @derivedFrom(field: "project")
  payEvents: [PayEvent!]! @derivedFrom(field: "project")
  mintTokensEvents: [MintTokensEvent!]! @derivedFrom(field: "project")
  redeemEvents: [RedeemEvent!]! @derivedFrom(field: "project")
  deployedERC20s: [DeployedERC20Event!]! @derivedFrom(field: "project")
  distributePayoutsEvents: [DistributePayoutsEvent!]! @derivedFrom(field: "project")
  distributeToPayoutSplitEvents: [DistributeToPayoutSplitEvent!]! @derivedFrom(field: "project")
  distributeReservedTokensEvents: [DistributeReservedTokensEvent!]! @derivedFrom(field: "project")
  distributeToReservedTokenSplitEvents: [DistributeToReservedTokenSplitEvent!]! @derivedFrom(field: "project")
  deployedERC20Events: [DeployedERC20Event!]! @derivedFrom(field: "project")
  useAllowanceEvents: [UseAllowanceEvent!]! @derivedFrom(field: "project")
  projectEvents: [ProjectEvent!]! @derivedFrom(field: "project")
}

# v2
type Participant @entity {
  id: ID!
  project: Project!
  projectId: Int!
  wallet: Bytes!
  totalPaid: BigInt!
  lastPaidTimestamp: Int!
  balance: BigInt!
  stakedBalance: BigInt!
  unstakedBalance: BigInt!
}

# v2
type ProjectEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!

  # Conditional properties. Only one of these properties should exist. This is a helper entity that makes it possible to query all "project events" for a project.
  payEvent: PayEvent
  mintTokensEvent: MintTokensEvent
  redeemEvent: RedeemEvent 
  deployedERC20Event: DeployedERC20Event
  projectCreateEvent: ProjectCreateEvent
  distributePayoutsEvent: DistributePayoutsEvent
  distributeReservedTokensEvent: DistributeReservedTokensEvent
  distributeToReservedTokenSplitEvent: DistributeToReservedTokenSplitEvent
  distributeToPayoutSplitEvent: DistributeToPayoutSplitEvent
  useAllowanceEvent: UseAllowanceEvent
}

# v2
type PayEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  caller: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  note: String!
}

# v2
type MintTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  beneficiary: Bytes!
  amount: BigInt!
  memo: String!
  caller: Bytes!
}

# v2
type RedeemEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  holder: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  returnAmount: BigInt!
  caller: Bytes!
}

# v2
type DeployedERC20Event @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  symbol: String!
  address: Bytes # will be empty for v1.x events
}

#############################################################################
############################### v2.x entities ###############################
#############################################################################
# v2
type ProtocolV2Log @entity {
  id: ID!
  log: ProtocolLog!
  projectsCount: Int!
  volumePaid: BigInt!
  volumeRedeemed: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
}

# v2
type DistributePayoutsEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleConfiguration: BigInt!
  fundingCycleNumber: Int!
  beneficiary: Bytes!
  amount: BigInt!
  distributedAmount: BigInt!
  fee: BigInt!
  beneficiaryDistributionAmount: BigInt!
  memo: String!
  caller: Bytes!
  splitDistributions: [DistributeToPayoutSplitEvent!]!
    @derivedFrom(field: "distributePayoutsEvent")
}

# v2
type DistributeToPayoutSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  domain: BigInt!
  group: BigInt!
  amount: BigInt!
  caller: Bytes!
  distributePayoutsEvent: DistributePayoutsEvent!

  # Split struct properties below
  preferClaimed: Boolean!
  preferAddToBalance: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
  allocator: Bytes!
}

# v2
type DistributeReservedTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleNumber: Int!
  beneficiary: Bytes!
  tokenCount: BigInt!
  beneficiaryTokenCount: BigInt!
  memo: String!
  caller: Bytes!
  splitDistributions: [DistributeToReservedTokenSplitEvent!]!
    @derivedFrom(field: "distributeReservedTokensEvent")
}

# v2
type DistributeToReservedTokenSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  tokenCount: BigInt!
  caller: Bytes!
  distributeReservedTokensEvent: DistributeReservedTokensEvent!

  # Split struct properties below
  preferClaimed: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
  allocator: Bytes!
}

# v2
type UseAllowanceEvent @entity{
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!

  fundingCycleConfiguration: BigInt!
  fundingCycleNumber: Int!
  beneficiary: Bytes!
  amount: BigInt!
  distributedAmount: BigInt!
  netDistributedamount: BigInt!
  memo: String!
  caller: Bytes!
}
